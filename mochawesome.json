{
  "stats": {
    "suites": 6,
    "tests": 25,
    "passes": 7,
    "pending": 0,
    "failures": 18,
    "testsRegistered": 25,
    "passPercent": 28,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-12T05:23:31.727Z",
    "end": "2023-05-12T05:24:04.164Z",
    "duration": 32437
  },
  "results": [
    {
      "uuid": "3442850b-e74c-469c-b187-77ab6fdb2abe",
      "title": "",
      "fullFile": "cypress\\e2e\\user\\create_with_array.cy.js",
      "file": "cypress\\e2e\\user\\create_with_array.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6c2c19e5-1083-4161-9c11-ba41d5152c4d",
          "title": "Teste de criar lista de usuários com array",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cria uma lista de usuários com sucesso usando array",
              "fullTitle": "Teste de criar lista de usuários com array Cria uma lista de usuários com sucesso usando array",
              "timedOut": null,
              "duration": 274,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/user/createWithArray',\n  body: users\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "b9eb67c7-4c4d-43a4-b982-6b201e585da2",
              "parentUUID": "6c2c19e5-1083-4161-9c11-ba41d5152c4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a criação de vários usuários com o mesmo ID",
              "fullTitle": "Teste de criar lista de usuários com array Não deve permitir a criação de vários usuários com o mesmo ID",
              "timedOut": null,
              "duration": 552,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const duplicateIdUsers = [...users, users[0]];\ncy.request({\n  method: 'POST',\n  url: '/user/createWithArray',\n  body: duplicateIdUsers,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para IDs duplicados\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/create_with_array.cy.js:46:39)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "9f8c2c70-73de-4b67-9af2-cfcd87e5576e",
              "parentUUID": "6c2c19e5-1083-4161-9c11-ba41d5152c4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a criação de uma lista de usuários onde um dos usuários tem um ID faltante",
              "fullTitle": "Teste de criar lista de usuários com array Não deve permitir a criação de uma lista de usuários onde um dos usuários tem um ID faltante",
              "timedOut": null,
              "duration": 383,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const userWithoutId = _objectSpread(_objectSpread({}, users[0]), {}, {\n  id: undefined\n});\nconst usersWithMissingId = [...users, userWithoutId];\ncy.request({\n  method: 'POST',\n  url: '/user/createWithArray',\n  body: usersWithMissingId,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para usuários sem ID\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/create_with_array.cy.js:60:39)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "7dd0b92d-1639-47da-b5ec-142a694a0ad1",
              "parentUUID": "6c2c19e5-1083-4161-9c11-ba41d5152c4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a criação de uma lista de usuários onde um dos usuários tem um email inválido",
              "fullTitle": "Teste de criar lista de usuários com array Não deve permitir a criação de uma lista de usuários onde um dos usuários tem um email inválido",
              "timedOut": null,
              "duration": 374,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const userWithInvalidEmail = _objectSpread(_objectSpread({}, users[0]), {}, {\n  email: 'invalid-email'\n});\nconst usersWithInvalidEmail = [...users, userWithInvalidEmail];\ncy.request({\n  method: 'POST',\n  url: '/user/createWithArray',\n  body: usersWithInvalidEmail,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para emails inválidos\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/create_with_array.cy.js:74:39)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "ec8a7d6a-c3d6-40da-b870-54bc3c0defb8",
              "parentUUID": "6c2c19e5-1083-4161-9c11-ba41d5152c4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a criação de uma lista de usuários vazia",
              "fullTitle": "Teste de criar lista de usuários com array Não deve permitir a criação de uma lista de usuários vazia",
              "timedOut": null,
              "duration": 436,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const emptyUsers = [];\ncy.request({\n  method: 'POST',\n  url: '/user/createWithArray',\n  body: emptyUsers,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para uma lista de usuários vazia\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/create_with_array.cy.js:86:39)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "44775461-b88a-467a-a0c3-3c1a87f2cd54",
              "parentUUID": "6c2c19e5-1083-4161-9c11-ba41d5152c4d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b9eb67c7-4c4d-43a4-b982-6b201e585da2"
          ],
          "failures": [
            "9f8c2c70-73de-4b67-9af2-cfcd87e5576e",
            "7dd0b92d-1639-47da-b5ec-142a694a0ad1",
            "ec8a7d6a-c3d6-40da-b870-54bc3c0defb8",
            "44775461-b88a-467a-a0c3-3c1a87f2cd54"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2019,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "23ea0ba4-3dbd-462d-a038-40aa6373ccae",
      "title": "",
      "fullFile": "cypress\\e2e\\user\\create_with_list.cy.js",
      "file": "cypress\\e2e\\user\\create_with_list.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "527aaeea-dc5d-4523-9369-00a23a7127fa",
          "title": "Teste de criar lista de usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cria uma lista de usuários com sucesso",
              "fullTitle": "Teste de criar lista de usuários Cria uma lista de usuários com sucesso",
              "timedOut": null,
              "duration": 243,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/user/createWithList',\n  body: users\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "985025d6-678e-4df7-be03-deae7c55238f",
              "parentUUID": "527aaeea-dc5d-4523-9369-00a23a7127fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a criação de vários usuários com o mesmo ID",
              "fullTitle": "Teste de criar lista de usuários Não deve permitir a criação de vários usuários com o mesmo ID",
              "timedOut": null,
              "duration": 406,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const duplicateIdUsers = [...users, users[0]];\ncy.request({\n  method: 'POST',\n  url: '/user/createWithList',\n  body: duplicateIdUsers,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para IDs duplicados\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/create_with_list.cy.js:46:39)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "e2ee28d6-9fc3-4c37-9b9b-808797140595",
              "parentUUID": "527aaeea-dc5d-4523-9369-00a23a7127fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a criação de uma lista de usuários onde um dos usuários tem um ID faltante",
              "fullTitle": "Teste de criar lista de usuários Não deve permitir a criação de uma lista de usuários onde um dos usuários tem um ID faltante",
              "timedOut": null,
              "duration": 408,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const userWithoutId = _objectSpread(_objectSpread({}, users[0]), {}, {\n  id: undefined\n});\nconst usersWithMissingId = [...users, userWithoutId];\ncy.request({\n  method: 'POST',\n  url: '/user/createWithList',\n  body: usersWithMissingId,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para usuários sem ID\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/create_with_list.cy.js:60:39)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "b35e3151-8d35-4dce-833f-f4bd981b92f3",
              "parentUUID": "527aaeea-dc5d-4523-9369-00a23a7127fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a criação de uma lista de usuários onde um dos usuários tem um email inválido",
              "fullTitle": "Teste de criar lista de usuários Não deve permitir a criação de uma lista de usuários onde um dos usuários tem um email inválido",
              "timedOut": null,
              "duration": 424,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const userWithInvalidEmail = _objectSpread(_objectSpread({}, users[0]), {}, {\n  email: 'invalid-email'\n});\nconst usersWithInvalidEmail = [...users, userWithInvalidEmail];\ncy.request({\n  method: 'POST',\n  url: '/user/createWithList',\n  body: usersWithInvalidEmail,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para emails inválidos\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/create_with_list.cy.js:74:39)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "addd4109-3004-4bfa-91b5-0b4da8cee8aa",
              "parentUUID": "527aaeea-dc5d-4523-9369-00a23a7127fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a criação de uma lista de usuários vazia",
              "fullTitle": "Teste de criar lista de usuários Não deve permitir a criação de uma lista de usuários vazia",
              "timedOut": null,
              "duration": 401,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const emptyUsers = [];\ncy.request({\n  method: 'POST',\n  url: '/user/createWithList',\n  body: emptyUsers,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para uma lista de usuários vazia\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/create_with_list.cy.js:87:39)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "692b7e7b-98de-442c-9989-b0106d01a6da",
              "parentUUID": "527aaeea-dc5d-4523-9369-00a23a7127fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "985025d6-678e-4df7-be03-deae7c55238f"
          ],
          "failures": [
            "e2ee28d6-9fc3-4c37-9b9b-808797140595",
            "b35e3151-8d35-4dce-833f-f4bd981b92f3",
            "addd4109-3004-4bfa-91b5-0b4da8cee8aa",
            "692b7e7b-98de-442c-9989-b0106d01a6da"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1882,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c4ad298d-bc1a-4c6d-8742-39debc846646",
      "title": "",
      "fullFile": "cypress\\e2e\\user\\login_user.cy.js",
      "file": "cypress\\e2e\\user\\login_user.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "343e6dbc-0843-4ed5-8d9e-6ddfe4867a76",
          "title": "Teste de login do usuário",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Realizar login com sucesso",
              "fullTitle": "Teste de login do usuário Realizar login com sucesso",
              "timedOut": null,
              "duration": 234,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `/user/login?username=${username}&password=${password}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.headers).to.have.property('x-expires-after');\n  expect(response.headers).to.have.property('x-rate-limit');\n});",
              "err": {},
              "uuid": "bd47c3f4-1ab3-411b-a56f-b868913f05f9",
              "parentUUID": "343e6dbc-0843-4ed5-8d9e-6ddfe4867a76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir login com nome de usuário incorreto",
              "fullTitle": "Teste de login do usuário Não deve permitir login com nome de usuário incorreto",
              "timedOut": null,
              "duration": 437,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `/user/login?username=wrong&password=${password}`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(403); // supondo que a API retorna 403 para credenciais inválidas\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 403",
                "estack": "AssertionError: expected 200 to equal 403\n    at Context.eval (webpack:///./cypress/e2e/user/login_user.cy.js:24:39)",
                "diff": "- 200\n+ 403\n"
              },
              "uuid": "9cafc697-5374-444f-bddd-fa08e14d2277",
              "parentUUID": "343e6dbc-0843-4ed5-8d9e-6ddfe4867a76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir login com senha incorreta",
              "fullTitle": "Teste de login do usuário Não deve permitir login com senha incorreta",
              "timedOut": null,
              "duration": 378,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `/user/login?username=${username}&password=wrong`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(403); // supondo que a API retorna 403 para credenciais inválidas\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 403",
                "estack": "AssertionError: expected 200 to equal 403\n    at Context.eval (webpack:///./cypress/e2e/user/login_user.cy.js:34:39)",
                "diff": "- 200\n+ 403\n"
              },
              "uuid": "7ace7599-58a5-4086-a083-f9227fe4468d",
              "parentUUID": "343e6dbc-0843-4ed5-8d9e-6ddfe4867a76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir login com nome de usuário e senha em branco",
              "fullTitle": "Teste de login do usuário Não deve permitir login com nome de usuário e senha em branco",
              "timedOut": null,
              "duration": 400,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `/user/login?username=&password=`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(403); // supondo que a API retorna 403 para credenciais inválidas\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 403",
                "estack": "AssertionError: expected 200 to equal 403\n    at Context.eval (webpack:///./cypress/e2e/user/login_user.cy.js:44:39)",
                "diff": "- 200\n+ 403\n"
              },
              "uuid": "bd186eae-070c-4385-ba88-478dd92cbccd",
              "parentUUID": "343e6dbc-0843-4ed5-8d9e-6ddfe4867a76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir login com nome de usuário em branco e senha correta",
              "fullTitle": "Teste de login do usuário Não deve permitir login com nome de usuário em branco e senha correta",
              "timedOut": null,
              "duration": 414,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `/user/login?username=&password=${password}`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(403); // supondo que a API retorna 403 para credenciais inválidas\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 403",
                "estack": "AssertionError: expected 200 to equal 403\n    at Context.eval (webpack:///./cypress/e2e/user/login_user.cy.js:54:39)",
                "diff": "- 200\n+ 403\n"
              },
              "uuid": "1c691e7a-7403-4ef5-837b-8294e4a1b402",
              "parentUUID": "343e6dbc-0843-4ed5-8d9e-6ddfe4867a76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir login com nome de usuário correto e senha em branco",
              "fullTitle": "Teste de login do usuário Não deve permitir login com nome de usuário correto e senha em branco",
              "timedOut": null,
              "duration": 396,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `/user/login?username=${username}&password=`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(403); // supondo que a API retorna 403 para credenciais inválidas\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 403",
                "estack": "AssertionError: expected 200 to equal 403\n    at Context.eval (webpack:///./cypress/e2e/user/login_user.cy.js:64:39)",
                "diff": "- 200\n+ 403\n"
              },
              "uuid": "911685ea-f5d3-4817-ab03-2c57706afa69",
              "parentUUID": "343e6dbc-0843-4ed5-8d9e-6ddfe4867a76",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bd47c3f4-1ab3-411b-a56f-b868913f05f9"
          ],
          "failures": [
            "9cafc697-5374-444f-bddd-fa08e14d2277",
            "7ace7599-58a5-4086-a083-f9227fe4468d",
            "bd186eae-070c-4385-ba88-478dd92cbccd",
            "1c691e7a-7403-4ef5-837b-8294e4a1b402",
            "911685ea-f5d3-4817-ab03-2c57706afa69"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2259,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "cc041af9-38b1-41dd-a7a4-14977219cd61",
      "title": "",
      "fullFile": "cypress\\e2e\\user\\logout_user.cy.js",
      "file": "cypress\\e2e\\user\\logout_user.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5f6dcc94-4fd4-45ee-9f44-3383e6cb2988",
          "title": "Teste de logout do usuário",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Realizar logout com sucesso",
              "fullTitle": "Teste de logout do usuário Realizar logout com sucesso",
              "timedOut": null,
              "duration": 250,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/user/logout'\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "9615d32d-d34c-4697-af1a-eea25a410589",
              "parentUUID": "5f6dcc94-4fd4-45ee-9f44-3383e6cb2988",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9615d32d-d34c-4697-af1a-eea25a410589"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 250,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0c3533cd-a44b-484e-be1b-aa7bef75ca6c",
      "title": "",
      "fullFile": "cypress\\e2e\\user\\user_by_username.cy.js",
      "file": "cypress\\e2e\\user\\user_by_username.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5cfd2643-3d9d-42cc-b591-9dcb65978752",
          "title": "Teste de obter usuário pelo nome de usuário",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Obter um usuário com sucesso pelo nome de usuário",
              "fullTitle": "Teste de obter usuário pelo nome de usuário Obter um usuário com sucesso pelo nome de usuário",
              "timedOut": null,
              "duration": 308,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `/user/${username}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(username);\n});",
              "err": {},
              "uuid": "291b24c7-be88-47c8-9303-57b9a6394bec",
              "parentUUID": "5cfd2643-3d9d-42cc-b591-9dcb65978752",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve encontrar um usuário com nome de usuário que não existe",
              "fullTitle": "Teste de obter usuário pelo nome de usuário Não deve encontrar um usuário com nome de usuário que não existe",
              "timedOut": null,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentUsername = 'nonExistentUser';\ncy.request({\n  method: 'GET',\n  url: `/user/${nonExistentUsername}`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404); // supondo que a API retorna 404 para usuários não encontrados\n});",
              "err": {},
              "uuid": "0129344d-aae9-4525-a06b-2927004f0cea",
              "parentUUID": "5cfd2643-3d9d-42cc-b591-9dcb65978752",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a busca por um nome de usuário vazio",
              "fullTitle": "Teste de obter usuário pelo nome de usuário Não deve permitir a busca por um nome de usuário vazio",
              "timedOut": null,
              "duration": 356,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `/user/`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para requisições malformadas\n});",
              "err": {
                "message": "AssertionError: expected 405 to equal 400",
                "estack": "AssertionError: expected 405 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/user_by_username.cy.js:34:39)",
                "diff": "- 405\n+ 400\n"
              },
              "uuid": "451659c6-23ba-4db1-8e2f-c079e4d9886a",
              "parentUUID": "5cfd2643-3d9d-42cc-b591-9dcb65978752",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a busca por um nome de usuário com caracteres especiais",
              "fullTitle": "Teste de obter usuário pelo nome de usuário Não deve permitir a busca por um nome de usuário com caracteres especiais",
              "timedOut": null,
              "duration": 397,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const specialCharUsername = 'testuser!@#';\ncy.request({\n  method: 'GET',\n  url: `/user/${specialCharUsername}`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para requisições malformadas\n});",
              "err": {
                "message": "AssertionError: expected 404 to equal 400",
                "estack": "AssertionError: expected 404 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/user_by_username.cy.js:46:39)",
                "diff": "- 404\n+ 400\n"
              },
              "uuid": "97c3fcae-53b5-44c7-8263-6c94f30bd97b",
              "parentUUID": "5cfd2643-3d9d-42cc-b591-9dcb65978752",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "291b24c7-be88-47c8-9303-57b9a6394bec",
            "0129344d-aae9-4525-a06b-2927004f0cea"
          ],
          "failures": [
            "451659c6-23ba-4db1-8e2f-c079e4d9886a",
            "97c3fcae-53b5-44c7-8263-6c94f30bd97b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1267,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "64894a70-c605-4f59-86e5-648d87b4ec0b",
      "title": "",
      "fullFile": "cypress\\e2e\\user\\create_user.cy.js",
      "file": "cypress\\e2e\\user\\create_user.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "adc90f69-79fc-4eee-8e53-aacc64b9f33a",
          "title": "Teste de criar usuário",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Criar um novo usuário com sucesso",
              "fullTitle": "Teste de criar usuário Criar um novo usuário com sucesso",
              "timedOut": null,
              "duration": 926,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/user',\n  body: user\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "0f4301d3-4b75-42cb-ab6a-70c38b6c6d9a",
              "parentUUID": "adc90f69-79fc-4eee-8e53-aacc64b9f33a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a criação de um usuário com o mesmo ID",
              "fullTitle": "Teste de criar usuário Não deve permitir a criação de um usuário com o mesmo ID",
              "timedOut": null,
              "duration": 932,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/user',\n  body: user,\n  failOnStatusCode: false // para que Cypress não falhe automaticamente em um status de erro HTTP\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para IDs duplicados\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/create_user.cy.js:32:39)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "c6fd650c-12d0-48be-8fa5-f5432dd98aac",
              "parentUUID": "adc90f69-79fc-4eee-8e53-aacc64b9f33a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a criação de um usuário sem ID",
              "fullTitle": "Teste de criar usuário Não deve permitir a criação de um usuário sem ID",
              "timedOut": null,
              "duration": 681,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const userWithoutId = _objectSpread(_objectSpread({}, user), {}, {\n  id: undefined\n});\ncy.request({\n  method: 'POST',\n  url: '/user',\n  body: userWithoutId,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para usuários sem ID\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/create_user.cy.js:45:39)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "aa34d248-9fd0-4771-a0f0-7f2bcafe8d61",
              "parentUUID": "adc90f69-79fc-4eee-8e53-aacc64b9f33a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir a criação de um usuário com um email inválido",
              "fullTitle": "Teste de criar usuário Não deve permitir a criação de um usuário com um email inválido",
              "timedOut": null,
              "duration": 377,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const userWithInvalidEmail = _objectSpread(_objectSpread({}, user), {}, {\n  email: 'invalid-email'\n});\ncy.request({\n  method: 'POST',\n  url: '/user',\n  body: userWithInvalidEmail,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // supondo que a API retorna 400 para emails inválidos\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/user/create_user.cy.js:58:39)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "3dedc80f-6601-40e3-bcb8-13d8c2b8372e",
              "parentUUID": "adc90f69-79fc-4eee-8e53-aacc64b9f33a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0f4301d3-4b75-42cb-ab6a-70c38b6c6d9a"
          ],
          "failures": [
            "c6fd650c-12d0-48be-8fa5-f5432dd98aac",
            "aa34d248-9fd0-4771-a0f0-7f2bcafe8d61",
            "3dedc80f-6601-40e3-bcb8-13d8c2b8372e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2916,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}